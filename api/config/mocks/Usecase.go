// Code generated by mockery v1.0.0. DO NOT EDIT.

// If you want to rebuild this file, make mock-monitorable

package mocks

import (
	builder "github.com/monitoror/monitoror/pkg/monitoror/builder"

	configmodels "github.com/monitoror/monitoror/api/config/models"

	mock "github.com/stretchr/testify/mock"

	models "github.com/monitoror/monitoror/models"

	utils "github.com/monitoror/monitoror/pkg/monitoror/utils"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// RegisterTile provides a mock function with given fields: tileType, variant
func (_m *Usecase) RegisterTile(tileType models.TileType, variant string) {
	_m.Called(tileType, variant)
}

// GetConfig provides a mock function with given fields: params
func (_m *Usecase) GetConfig(params *configmodels.ConfigParams) *configmodels.ConfigBag {
	ret := _m.Called(params)

	var r0 *configmodels.ConfigBag
	if rf, ok := ret.Get(0).(func(*configmodels.ConfigParams) *configmodels.ConfigBag); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configmodels.ConfigBag)
		}
	}

	return r0
}

// Hydrate provides a mock function with given fields: _a0
func (_m *Usecase) Hydrate(_a0 *configmodels.ConfigBag) {
	_m.Called(_a0)
}

// EnableDynamicTile provides a mock function with given fields: tileType, variant, clientConfigValidator, _a3
func (_m *Usecase) EnableDynamicTile(tileType models.TileType, variant string, clientConfigValidator utils.Validator, _a3 builder.DynamicTileBuilder) {
	_m.Called(tileType, variant, clientConfigValidator, _a3)
}

// EnableTile provides a mock function with given fields: tileType, variant, clientConfigValidator, path, initialMaxDelay
func (_m *Usecase) EnableTile(tileType models.TileType, variant string, clientConfigValidator utils.Validator, path string, initialMaxDelay int) {
	_m.Called(tileType, variant, clientConfigValidator, path, initialMaxDelay)
}

// Verify provides a mock function with given fields: _a0
func (_m *Usecase) Verify(_a0 *configmodels.ConfigBag) {
	_m.Called(_a0)
}
